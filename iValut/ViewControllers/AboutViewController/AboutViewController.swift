//
//  AboutViewController.swift
//  iValt
//
//  Created by Dinker Malhotra on 02/10/19.
//  Copyright Â© 2019 MAC Book Air. All rights reserved.
//

import UIKit
import FaceTecSDK

class AboutViewController: UIViewController, URLSessionDelegate {
    
    @IBOutlet weak var lblPhone: UILabel!
    @IBOutlet weak var lblVersion: UILabel!
    @IBOutlet weak var lblEmail: UILabel!
    @IBOutlet weak var lblName: UILabel!
    @IBOutlet weak var btnBackUp: UIButton!
    
    var customTab = CustomTabViewController()
    var latestSessionResult: FaceTecSessionResult!
    var latestIDScanResult: FaceTecIDScanResult!
    var latestProcessor: Processor!
    var requestInProgress: Bool = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
    
        setupLeftBarButton()
        setupCustomTabView()
        checkEnrollmentStatus()
        
        lblPhone.text = Helper.getPREF(UserDefaults.PREF_MOBILE_NUMBER)
        lblEmail.text = Helper.getPREF(UserDefaults.PREF_EMAIL)
        lblName.text = Helper.getPREF(UserDefaults.PREF_NAME)
        lblVersion.text = "v \(Bundle.main.releaseVersionNumber ?? "6.0.7")"
        
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                
            }
        })
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = true
    }
    
    func setupLeftBarButton() {
        self.title = "Profile"
        let leftBarButton = UIBarButtonItem.init(image: UIImage(), style: .plain, target: nil, action: nil)
        self.navigationItem.leftBarButtonItem = leftBarButton
    }

    func setupCustomTabView() {
        if CurrentDevice.iPhoneX || CurrentDevice.iPhoneXR {
            customTab.view.frame = CGRect.init(x: 0, y: AppConstants.PORTRAIT_SCREEN_HEIGHT - 83, width: AppConstants.PORTRAIT_SCREEN_WIDTH, height: 49)
        } else {
            customTab.view.frame = CGRect.init(x: 0, y: AppConstants.PORTRAIT_SCREEN_HEIGHT - 49, width: AppConstants.PORTRAIT_SCREEN_WIDTH, height: 49)
        }
        customTab.currentScreen = Strings.PROFILE
        self.addChild(customTab)
        self.view.addSubview(customTab.view)
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        
        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call.")
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as? [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil)
                {
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                }
                else {
                    print("Exception raised while attempting HTTPS call.")
                }
            }
        })
        task.resume()
    }
}

// MARK: - BUTTON ACTION
extension AboutViewController {
    @IBAction func PrivacyClicked(_ sender: UIButton) {
        guard let url = URL(string: WebService.privacyPolicy) else { return }
        if #available(iOS 10.0, *) {
            UIApplication.shared.open(url)
        } else {
            UIApplication.shared.openURL(url)
        }
    }
    
    @IBAction func setupBackUp(_ sender: UIButton) {
        // Get a Session Token from the FaceTec SDK, then start the Enrollment.
        getSessionToken() { sessionToken in
            self.latestProcessor = EnrollmentProcessorAbout(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    @IBAction func menuClicked(_ sender: UIButton) {
        Helper.showThreeButtonsAlertWithCompletion(onVC: self, title: Alert.INFO, message: "", btnOneTitle: Strings.ABOUT, btnTwoTitle: Strings.FAQ, btnThreeTitle: Strings.CONTACT_US, onBtnOneClick: {
            if let vc = ViewControllerHelper.getViewController(ofType: .AboutUsViewController) as? AboutUsViewController {
                let navigationController = UINavigationController.init(rootViewController: vc)
                navigationController.modalPresentationStyle = .fullScreen
                self.present(navigationController, animated: true, completion: nil)
            }
        }, onBtnTwoClick: {
            guard let url = URL(string: WebService.FAQS) else { return }
            if #available(iOS 10.0, *) {
                UIApplication.shared.open(url)
            } else {
                UIApplication.shared.openURL(url)
            }
        }, onBtnThreeClick: {
            if let vc = ViewControllerHelper.getViewController(ofType: .ContactUsViewController) as? ContactUsViewController {
                let navigationController = UINavigationController.init(rootViewController: vc)
                navigationController.modalPresentationStyle = .fullScreen
                self.present(navigationController, animated: true, completion: nil)
            }
        })
    }
}

// MARK: - FACETECH CALLBACK
extension AboutViewController {
    func onComplete() {
        if self.latestProcessor.isSuccess() {
            self.setEnrollmentStatus()
        }
    }
    
    func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
        latestSessionResult = sessionResult
    }
    
    func setLatestIDScanResult(idScanResult: FaceTecIDScanResult) {
        latestIDScanResult = idScanResult
    }
    
    func setLatestServerResult(responseJSON: [String: AnyObject]) {
        print(responseJSON)
    }
}

// MARK: - API CALL
extension AboutViewController {
    func checkEnrollmentStatus() {
        let params: [String: AnyObject] = [WSRequestParams.WS_REQS_PARAM_MOBILE: Helper.getPREF(UserDefaults.PREF_MOBILE) as AnyObject]
        WSManager.wsCallCheckEnrollment(params) { (isSuccess) in
            if isSuccess {
                self.btnBackUp.isHidden = true
            }
            else {
                self.btnBackUp.isHidden = false
            }
        }
    }
    
    func setEnrollmentStatus() {
        let params: [String: AnyObject] = [WSRequestParams.WS_REQS_PARAM_MOBILE: Helper.getPREF(UserDefaults.PREF_MOBILE) as AnyObject]
        WSManager.wsCallSetEnrollment(params) { (isSuccess) in
            if isSuccess {
                self.btnBackUp.isHidden = true
            }
        }
    }
}
